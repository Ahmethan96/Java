package com.codewithmosh;

public class HelloWorld {
	public static void main(String[] args) {
		byte age = 26;
		long viewCounts = 3_123_456_789L; // in case of very long int add long - L
		float price = 10.9F;
		char name = 'A';
		boolean isEl = true;
		System.out.println(viewCounts);
		System.out.println(price); 
		System.out.println(name);
		System.out.println(isEl);
	}
}
////////////////////////////////////////////////////////////////////

package com.codewithmosh;
import java.util.Date;

public class HelloWorld {
	public static void main(String[] args) {
		byte age = 26;
		Date now = new Date(); // new is used when dealing with ref to allocate memory. Date() to create object
		System.out.println(now);
		
	}
}
///////////////////////////////////////////////////////////////////
			***primitive***

package com.codewithmosh;
import java.util.Date;

public class HelloWorld {
	public static void main(String[] args) {
		byte x = 1; 
		byte y = x;
		x = 2;
		System.out.println(x);
		System.out.println(y);// y did not changed when we made x = 2 
		// because it is primitive and independent of y 
		
	}
}


/////////////////////////////////////////////////////////////////
			***refrenceses***
package com.codewithmosh;
import java.util.Date;
import java.awt.*;

public class HelloWorld {
	public static void main(String[] args) {
		Point point1 = new Point(1, 1);
		Point point2 = point1;
		point1.x = 2;
		System.out.println(point2);// due to the change in point1 in the value of x there will 
		// change in the value of x in point2 because they are refrencing to the same memory location
		// and point1 and point2 are dependent on each other
		// so this is the main differnce between primitive and refrnces
	}
}

///////////////////////////////////////////////////////////////////
		*** String is a refrence type***
package com.codewithmosh;
import java.util.Date;
import java.awt.*;

public class HelloWorld {
	public static void main(String[] args) {
		String message = "Hello world"; // String in refrence type 
		                               // thus alternatively we could writ hello world as 
		                              // String message = new Sting("hello world")
									 // and we will have the same results
		System.out.println(message);
	}
}


//////////////////////////////////////////////////////////////


package com.codewithmosh;
import java.util.Date;
import java.awt.*;

public class HelloWorld {
	public static void main(String[] args) {
		String message = "Hello world "+ "@@";  
		System.out.println(message.endsWith("@@"));
		System.out.println(message.startsWith("@@"));
		System.out.println(message.length());
		System.out.println(message.indexOf("e"));
		System.out.println(message.replace("@@", "!!"));
		System.out.println(message);// we can see that the orginal string did not change
		                            // because str in java not immutable
		System.out.println(message.toLowerCase());
		System.out.println(message.toUpperCase());
		String mail = new String("Merhaba \"dunya\""); //    \ *** \ back slah is used.
		System.out.println(mail);
	}
}
////////////////////////////////////////////////////////////

package com.codewithmosh;
import java.util.Date;
import java.awt.*;
import java.util.Arrays;
public class HelloWorld {
	public static void main(String[] args) {
		int[] numbers = new int[5]; // int by itself is primitive, however since we convert in to
		// array by adding [] then it became a refrence thus we add new int[5]
		// and 5 is the number if index in the array
		//
		System.out.println(numbers); // in this case the result is the location of the memory 
		// so we need to convert it to array so we could see the numbers
		// but how we can see the actual itmes in numbers? 
		// 
		System.out.println(Arrays.toString(numbers));
		numbers[0] = 1;
		numbers[1] = 2; 
		numbers[2] = 3; 
		System.out.println(numbers[0]); 
		System.out.println(numbers[1]); 
		System.out.println(Arrays.toString(numbers));
		
		int[] new_numbers = {2, 3, 4, 5, 1}; // new way to initilize an Array {* * * }
		System.out.println(new_numbers.length);
		System.out.println(new_numbers[2]);
		System.out.println(Arrays.toString(new_numbers));
		Arrays.sort(new_numbers);
		System.out.println(Arrays.toString(new_numbers));
	}
}

/////////////////////////////////////////////////////////////

package com.codewithmosh;
import java.util.Date;
import java.awt.*;
import java.util.Arrays;
public class HelloWorld {
	public static void main(String[] args) {
		int[] number = new int[5];// to convert this to t dimensional Arrays we do the following we 
		// add an extra [] for each dimension as the following example
		// lets us suppose that we wnat to add 2*3 matrix so we will perform the following 
		
		int numbers[][] = new int[3][3]; // the first [2] is the number of Rows and the second is [3] is 
		// the number of columns
		System.out.println(number);
		System.out.println(Arrays.toString(numbers)); // this is not gonna work. it will show us 
		// the memory location 
		System.out.println(Arrays.deepToString(numbers));// this is gonna work. so we need use 
		// Arrays.deepToString(number) for dimensions higher than
		numbers[0][0] = 1;
		numbers[1][1] = 1;
		numbers[2][2] = 1;
		System.out.println(Arrays.deepToString(numbers));
		
		
	}
}
